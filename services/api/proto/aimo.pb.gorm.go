package proto

import (
	context "context"
	fmt "fmt"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm "github.com/jinzhu/gorm"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	strings "strings"
	time "time"
)

type PeriodORM struct {
	CreatedAt *time.Time
	Id        int32
	Period    string
	UpdatedAt *time.Time
}

// TableName overrides the default tablename generated by GORM
func (PeriodORM) TableName() string {
	return "periods"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Period) ToORM(ctx context.Context) (PeriodORM, error) {
	to := PeriodORM{}
	var err error
	if prehook, ok := interface{}(m).(PeriodWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Period = m.Period
	if m.CreatedAt != nil {
		*to.CreatedAt = m.CreatedAt.AsTime()
	}
	if m.UpdatedAt != nil {
		*to.UpdatedAt = m.UpdatedAt.AsTime()
	}
	if posthook, ok := interface{}(m).(PeriodWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *PeriodORM) ToPB(ctx context.Context) (Period, error) {
	to := Period{}
	var err error
	if prehook, ok := interface{}(m).(PeriodWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Period = m.Period
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if posthook, ok := interface{}(m).(PeriodWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Period the arg will be the target, the caller the one being converted from

// PeriodBeforeToORM called before default ToORM code
type PeriodWithBeforeToORM interface {
	BeforeToORM(context.Context, *PeriodORM) error
}

// PeriodAfterToORM called after default ToORM code
type PeriodWithAfterToORM interface {
	AfterToORM(context.Context, *PeriodORM) error
}

// PeriodBeforeToPB called before default ToPB code
type PeriodWithBeforeToPB interface {
	BeforeToPB(context.Context, *Period) error
}

// PeriodAfterToPB called after default ToPB code
type PeriodWithAfterToPB interface {
	AfterToPB(context.Context, *Period) error
}

type UserInfoORM struct {
	AdminFlg      bool
	DepartmentId  int32
	EnrollmentFlg bool
	FirstName     string
	JobId         int32
	LastName      string
	Period        string
	UserId        int32
	UserInfoId    int32
}

// TableName overrides the default tablename generated by GORM
func (UserInfoORM) TableName() string {
	return "user_infos"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *UserInfo) ToORM(ctx context.Context) (UserInfoORM, error) {
	to := UserInfoORM{}
	var err error
	if prehook, ok := interface{}(m).(UserInfoWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.UserInfoId = m.UserInfoId
	to.UserId = m.UserId
	to.LastName = m.LastName
	to.FirstName = m.FirstName
	to.Period = m.Period
	to.DepartmentId = m.DepartmentId
	to.JobId = m.JobId
	to.EnrollmentFlg = m.EnrollmentFlg
	to.AdminFlg = m.AdminFlg
	if posthook, ok := interface{}(m).(UserInfoWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *UserInfoORM) ToPB(ctx context.Context) (UserInfo, error) {
	to := UserInfo{}
	var err error
	if prehook, ok := interface{}(m).(UserInfoWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.UserInfoId = m.UserInfoId
	to.UserId = m.UserId
	to.LastName = m.LastName
	to.FirstName = m.FirstName
	to.Period = m.Period
	to.DepartmentId = m.DepartmentId
	to.JobId = m.JobId
	to.EnrollmentFlg = m.EnrollmentFlg
	to.AdminFlg = m.AdminFlg
	if posthook, ok := interface{}(m).(UserInfoWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type UserInfo the arg will be the target, the caller the one being converted from

// UserInfoBeforeToORM called before default ToORM code
type UserInfoWithBeforeToORM interface {
	BeforeToORM(context.Context, *UserInfoORM) error
}

// UserInfoAfterToORM called after default ToORM code
type UserInfoWithAfterToORM interface {
	AfterToORM(context.Context, *UserInfoORM) error
}

// UserInfoBeforeToPB called before default ToPB code
type UserInfoWithBeforeToPB interface {
	BeforeToPB(context.Context, *UserInfo) error
}

// UserInfoAfterToPB called after default ToPB code
type UserInfoWithAfterToPB interface {
	AfterToPB(context.Context, *UserInfo) error
}

// DefaultCreatePeriod executes a basic gorm create call
func DefaultCreatePeriod(ctx context.Context, in *Period, db *gorm.DB) (*Period, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(PeriodORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(PeriodORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type PeriodORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type PeriodORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadPeriod(ctx context.Context, in *Period, db *gorm.DB) (*Period, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(PeriodORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &PeriodORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(PeriodORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := PeriodORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(PeriodORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type PeriodORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type PeriodORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type PeriodORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeletePeriod(ctx context.Context, in *Period, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(PeriodORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&PeriodORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(PeriodORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type PeriodORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type PeriodORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeletePeriodSet(ctx context.Context, in []*Period, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []int32{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&PeriodORM{})).(PeriodORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&PeriodORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&PeriodORM{})).(PeriodORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type PeriodORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Period, *gorm.DB) (*gorm.DB, error)
}
type PeriodORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Period, *gorm.DB) error
}

// DefaultStrictUpdatePeriod clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdatePeriod(ctx context.Context, in *Period, db *gorm.DB) (*Period, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdatePeriod")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &PeriodORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(PeriodORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(PeriodORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(PeriodORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type PeriodORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type PeriodORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type PeriodORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchPeriod executes a basic gorm update call with patch behavior
func DefaultPatchPeriod(ctx context.Context, in *Period, updateMask *field_mask.FieldMask, db *gorm.DB) (*Period, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Period
	var err error
	if hook, ok := interface{}(&pbObj).(PeriodWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadPeriod(ctx, &Period{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(PeriodWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskPeriod(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(PeriodWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdatePeriod(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(PeriodWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type PeriodWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Period, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type PeriodWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Period, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type PeriodWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Period, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type PeriodWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Period, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetPeriod executes a bulk gorm update call with patch behavior
func DefaultPatchSetPeriod(ctx context.Context, objects []*Period, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Period, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Period, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchPeriod(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskPeriod patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskPeriod(ctx context.Context, patchee *Period, patcher *Period, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Period, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Period" {
			patchee.Period = patcher.Period
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamp.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamp.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListPeriod executes a gorm list call
func DefaultListPeriod(ctx context.Context, db *gorm.DB) ([]*Period, error) {
	in := Period{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(PeriodORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &PeriodORM{}, &Period{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(PeriodORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []PeriodORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(PeriodORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Period{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type PeriodORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type PeriodORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type PeriodORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]PeriodORM) error
}

// DefaultCreateUserInfo executes a basic gorm create call
func DefaultCreateUserInfo(ctx context.Context, in *UserInfo, db *gorm.DB) (*UserInfo, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(UserInfoORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(UserInfoORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type UserInfoORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type UserInfoORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

// DefaultApplyFieldMaskUserInfo patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskUserInfo(ctx context.Context, patchee *UserInfo, patcher *UserInfo, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*UserInfo, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"UserInfoId" {
			patchee.UserInfoId = patcher.UserInfoId
			continue
		}
		if f == prefix+"UserId" {
			patchee.UserId = patcher.UserId
			continue
		}
		if f == prefix+"LastName" {
			patchee.LastName = patcher.LastName
			continue
		}
		if f == prefix+"FirstName" {
			patchee.FirstName = patcher.FirstName
			continue
		}
		if f == prefix+"Period" {
			patchee.Period = patcher.Period
			continue
		}
		if f == prefix+"DepartmentId" {
			patchee.DepartmentId = patcher.DepartmentId
			continue
		}
		if f == prefix+"JobId" {
			patchee.JobId = patcher.JobId
			continue
		}
		if f == prefix+"EnrollmentFlg" {
			patchee.EnrollmentFlg = patcher.EnrollmentFlg
			continue
		}
		if f == prefix+"AdminFlg" {
			patchee.AdminFlg = patcher.AdminFlg
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListUserInfo executes a gorm list call
func DefaultListUserInfo(ctx context.Context, db *gorm.DB) ([]*UserInfo, error) {
	in := UserInfo{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(UserInfoORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &UserInfoORM{}, &UserInfo{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(UserInfoORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	ormResponse := []UserInfoORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(UserInfoORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*UserInfo{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type UserInfoORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type UserInfoORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type UserInfoORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]UserInfoORM) error
}
